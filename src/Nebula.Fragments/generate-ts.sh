#!/bin/bash

# TypeScript generation script for all Nebula proto files

# Ensure we're in the correct directory (Nebula.Fragments)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Set up PATH for protoc plugins
export PATH="$PATH:$PWD/ts-gen/node_modules/.bin"

echo "üöÄ Starting TypeScript generation for all proto files..."
echo "üìç Working directory: $(pwd)"
echo "üîß PATH includes: $PWD/ts-gen/node_modules/.bin"

# Clean existing generated files
echo "üßπ Cleaning existing generated files..."
rm -rf ts-gen/gen/*
rm -rf ts-gen/gen
mkdir -p ts-gen/gen
echo "  ‚úì Removed all previous generated files"

# Generate for each module individually to avoid case sensitivity issues
modules=("Organizations" "Authentication" "Shared")

echo "üì¶ Generating standard modules..."
for module in "${modules[@]}"; do
    echo "  ‚Üí Generating $module..."
    buf generate --path "Protos/Nebula/Services/Fragments/$module"
    if [ $? -eq 0 ]; then
        echo "  ‚úì $module generated successfully"
    else
        echo "  ‚úó Failed to generate $module"
        exit 1
    fi
done

# Fix case sensitivity issues in generated files
echo "üîß Fixing case sensitivity issues..."
find ts-gen/gen -name "*.ts" -type f -exec sed -i 's|../inventory/|../Inventory/|g' {} \;
echo "  ‚úì Case sensitivity fixes applied"

# Count generated files
total_files=$(find ts-gen/gen -name "*.ts" -type f | wc -l)
echo "üéâ Generation complete! Generated $total_files TypeScript files."

# List generated modules
echo "üìÅ Generated modules:"
find ts-gen/gen -type d -name "*" | grep -v "^ts-gen/gen$" | sort | sed 's|ts-gen/gen/||g' | sed 's|^|  - |g'

# Dynamic index.ts generation
echo ""
echo "üìù Building dynamic index.ts file..."

INDEX_FILE="ts-gen/index.ts"

# Create header for index.ts
cat > "$INDEX_FILE" << 'EOF'
// Auto-generated index file - DO NOT EDIT MANUALLY
// This file is generated by generate-ts.sh
// Generated on: DATE_PLACEHOLDER

EOF

# Replace date placeholder
sed -i "s/DATE_PLACEHOLDER/$(date)/" "$INDEX_FILE"

# Function to generate clean export names
generate_clean_export_name() {
    local filepath="$1"
    local filename=$(basename "$filepath" .ts)
    
    # Remove common suffixes and clean up the name
    filename=$(echo "$filename" | sed 's/_pb$//')
    filename=$(echo "$filename" | sed 's/_connect$/Connect/')
    
    echo "$filename"
}

# Add individual file exports
echo "// Individual file exports" >> "$INDEX_FILE"
find ts-gen/gen -name "*.ts" -type f | sort | while read -r file; do
    # Get relative path from ts-gen directory
    rel_path="${file#ts-gen/}"
    # Remove the .ts extension for import path
    import_path="${rel_path%.ts}"
    
    echo "export * from './$import_path';" >> "$INDEX_FILE"
done

# Add module-based namespace exports
echo "" >> "$INDEX_FILE"
echo "// Module namespace exports" >> "$INDEX_FILE"

# Create namespace exports for each module
for module in "${modules[@]}"; do
    # Check if module has generated files
    if find ts-gen/gen -path "*/$module/*.ts" -type f | head -1 | grep -q .; then
        echo "" >> "$INDEX_FILE"
        echo "// $module Module Namespace" >> "$INDEX_FILE"
        
        # Get all files for this module
        find ts-gen/gen -path "*/$module/*.ts" -type f | sort | while read -r file; do
            rel_path="${file#ts-gen/}"
            import_path="${rel_path%.ts}"
            clean_name=$(generate_clean_export_name "$file")
            
            echo "export * as ${module}_${clean_name} from './$import_path';" >> "$INDEX_FILE"
        done
    fi
done

# Add convenience re-exports by category
echo "" >> "$INDEX_FILE"
echo "// Convenience category exports" >> "$INDEX_FILE"

# Connect files (gRPC services)
connect_files=$(find ts-gen/gen -name "*_connect.ts" -type f)
if [ -n "$connect_files" ]; then
    echo "" >> "$INDEX_FILE"
    echo "// gRPC Connect Services" >> "$INDEX_FILE"
    echo "$connect_files" | sort | while read -r file; do
        rel_path="${file#ts-gen/}"
        import_path="${rel_path%.ts}"
        filename=$(basename "$file" .ts)
        clean_name=$(echo "$filename" | sed 's/_connect$//')
        
        echo "export * as ${clean_name}Service from './$import_path';" >> "$INDEX_FILE"
    done
fi

# Protobuf message files
pb_files=$(find ts-gen/gen -name "*_pb.ts" -type f)
if [ -n "$pb_files" ]; then
    echo "" >> "$INDEX_FILE"
    echo "// Protobuf Messages" >> "$INDEX_FILE"
    echo "$pb_files" | sort | while read -r file; do
        rel_path="${file#ts-gen/}"
        import_path="${rel_path%.ts}"
        filename=$(basename "$file" .ts)
        clean_name=$(echo "$filename" | sed 's/_pb$//')
        
        echo "export * as ${clean_name}Messages from './$import_path';" >> "$INDEX_FILE"
    done
fi

# Add footer
echo "" >> "$INDEX_FILE"
echo "// End of auto-generated exports" >> "$INDEX_FILE"

echo "  ‚úì Dynamic index.ts created successfully!"
echo "  üìç Location: $INDEX_FILE"

# Show summary of index.ts
echo ""
echo "üìä Index.ts Summary:"
total_exports=$(grep -c "^export" "$INDEX_FILE")
echo "  - Total exports: $total_exports"
echo "  - Individual file exports: $(grep -c "export \* from" "$INDEX_FILE")"
echo "  - Namespace exports: $(grep -c "export \* as.*from" "$INDEX_FILE")"

echo ""
echo "‚úÖ TypeScript generation and index building complete!"
